/*Problem:
          Given a square determine whats the min cost to turn it to a magic square (how much to change each number to achive)
*/

//Solution:
#include <bits/stdc++.h>

using namespace std;


// Complete the formingMagicSquare function below.
int formingMagicSquare(vector<vector<int>> s) {
    vector<vector<vector<int>>> list{
            { { 8, 1, 6 }, { 3, 5, 7 }, { 4, 9, 2 } }, 
            { { 6, 1, 8 }, { 7, 5, 3 }, { 2, 9, 4 } }, 
            { { 4, 9, 2 }, { 3, 5, 7 }, { 8, 1, 6 } }, 
            { { 2, 9, 4 }, { 7, 5, 3 }, { 6, 1, 8 } }, 
            { { 8, 3, 4 }, { 1, 5, 9 }, { 6, 7, 2 } }, 
            { { 4, 3, 8 }, { 9, 5, 1 }, { 2, 7, 6 } }, 
            { { 6, 7, 2 }, { 1, 5, 9 }, { 8, 3, 4 } }, 
            { { 2, 7, 6 }, { 9, 5, 1 }, { 4, 3, 8 } }
    };

    int min = 0; int sum =0; int low = 10000;
    for(int i = 0 ; i < 8; i++){
        sum = 0; min = 0;
        for(int j = 0; j<3; j++){
            for(int k = 0; k<3; k++){
                
                min = abs(s[j][k] - list[i][j][k]);
                sum += min;
                cout<<sum<<endl;
                
            }
        }
        if (sum < low){
            low = sum;
        }
    }
    return low;

}

int main()
{
    ofstream fout(getenv("OUTPUT_PATH"));

    vector<vector<int>> s(3);
    for (int i = 0; i < 3; i++) {
        s[i].resize(3);

        for (int j = 0; j < 3; j++) {
            cin >> s[i][j];
        }

        cin.ignore(numeric_limits<streamsize>::max(), '\n');
    }

    int result = formingMagicSquare(s);

    fout << result << "\n";

    fout.close();

    return 0;
}
