/*Problem:
          Given two strings and if user can only delete the last character or append string
          at the end with a character. Determine if the number of operations required match up
          with what test case provides.
*/

//Solution:
#include <bits/stdc++.h>

using namespace std;

// Complete the appendAndDelete function below.
string appendAndDelete(string s, string t, int k) {
    string y = "Yes"; string n = "No"; int del =0; int add =0;
    int same = 0; bool ctd = false;

    if (s == t){
        return y;
    }
    
    if (s.size() >= t.size()){
        for (int i = 0; i< s.size(); i++){
            for(int j = 0; j<t.size(); j++){
                if(i == j){
                    if (s[i] == t[j] ){
                        same++;
                    }
                    else{
                        ctd = true;
                        break;
                    }
                }
            }
            if(ctd){
                break;
            }
        }
        if(same == t.size()){
            del = s.size() - same;
        }
        else{
            del = s.size() - same;
            add = t.size() - same;
        } 
        if ((del + add) > k){
            return n;
        }
        else{
            return y;
        }
    }
    else{
        for (int i = 0; i< t.size(); i++){
            for(int j = 0; j<s.size(); j++){
                if(i == k){
                    if (t[i] == s[k] ){
                        same++;
                    }
                    else{
                        break;
                    }
                }
            }
        }
        del = s.size()-same;
        add = t.size()-same;
        if ((del + add) > k){
            return n;
        }
        else{
            return y;
        }
    }

}

int main()
{
    ofstream fout(getenv("OUTPUT_PATH"));

    string s;
    getline(cin, s);

    string t;
    getline(cin, t);

    int k;
    cin >> k;
    cin.ignore(numeric_limits<streamsize>::max(), '\n');

    string result = appendAndDelete(s, t, k);

    fout << result << "\n";

    fout.close();

    return 0;
}

