/*Problem:
          Given array of binary strings representing how many events a person completes, figure out max events completed by
          any two people (no overlap) and return frequencey of max events combination. ie - 010101 and 100011 means 4 max events
*/

//Solution:
#include <bits/stdc++.h>

using namespace std;

vector<string> split_string(string);

// Complete the acmTeam function below.
vector<int> acmTeam(vector<string> topic) {
    vector<int> max;
    string chck = "1";

    for(int i = 0; i < topic.size()-1; i++){
        for(int j = i+1; j < topic.size(); j++){
            int cnt = 0;
            string a = topic[i];
            string b = topic[j];

            for(int k = 0; k < a.size(); k++){
                if(a[k] == '1'){
                    cnt++;
                }
                else if (b[k] == '1'){
                    cnt++;
                }
            }
            max.push_back(cnt);
        }
    }

    sort(max.rbegin(),max.rend());
    int mx = max[0];
    int freq = 0;
    for (int m = 0; m < max.size(); m++){
        if(max[m] == mx){
            freq++;
        }
    }
    vector<int> fin;
    fin.push_back(mx);
    fin.push_back(freq);
    return fin;

}

int main()
{
    ofstream fout(getenv("OUTPUT_PATH"));

    string nm_temp;
    getline(cin, nm_temp);

    vector<string> nm = split_string(nm_temp);

    int n = stoi(nm[0]);

    int m = stoi(nm[1]);

    vector<string> topic(n);

    for (int i = 0; i < n; i++) {
        string topic_item;
        getline(cin, topic_item);

        topic[i] = topic_item;
    }

    vector<int> result = acmTeam(topic);

    for (int i = 0; i < result.size(); i++) {
        fout << result[i];

        if (i != result.size() - 1) {
            fout << "\n";
        }
    }

    fout << "\n";

    fout.close();

    return 0;
}

vector<string> split_string(string input_string) {
    string::iterator new_end = unique(input_string.begin(), input_string.end(), [] (const char &x, const char &y) {
        return x == y and x == ' ';
    });

    input_string.erase(new_end, input_string.end());

    while (input_string[input_string.length() - 1] == ' ') {
        input_string.pop_back();
    }

    vector<string> splits;
    char delimiter = ' ';

    size_t i = 0;
    size_t pos = input_string.find(delimiter);

    while (pos != string::npos) {
        splits.push_back(input_string.substr(i, pos - i));

        i = pos + 1;
        pos = input_string.find(delimiter, i);
    }

    splits.push_back(input_string.substr(i, min(pos, input_string.length()) - i + 1));

    return splits;
}
